/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   test_src                                           :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: crepou <crepou@student.42heilbronn.de>     +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2023/05/14 19:35:49 by apaghera          #+#    #+#             */
/*   Updated: 2023/06/14 13:28:27 by crepou           ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "include/control.h"
#include "include/parse.h"

void	leaks(void)
{
	system("leaks minishell");
}

int	main(int argc, char **argv, char **envp)
{
	//char	*input;
	t_lexer	lexer;
	t_cmds	**cmds;
	//char buffer[256];
	//struct termios old_termios, new_termios;

	//tcgetattr(0,&old_termios);
	(void)argc;
	(void)argv;
/* 	atexit(leaks); */
/* 	while(envp[j])
	{
		printf("%s\n", envp[j]);
		j++;
	} */
	signal(SIGINT, cntr_handler);
	//errno = 0;
	//printf("hello %d\n", execve(args[0], args, envp1));
	//if (errno != 0)
	//	perror("Error!\n");
	//printf("ls path: %s\n", get_env_path(envp, "ls"));
	//red = fill_redirection_struct("ls", "file1" , args, envp);
	//printf("My environment args: %s %s\n", red.args[0], red.args[1]);
	//printf("is there a pth? %d\n", access("/bin/ls", X_OK));
	//new_termios = old_termios;
  	//new_termios.c_cc[VEOF]  = 3; // ^C
 	//new_termios.c_cc[VINTR] = 4; // ^D
  	//tcsetattr(0,TCSANOW,&new_termios);
	//(**cmds).data.prompt_input = NULL;
	cmds = NULL;
	while (1)
	{
		clear_line();
		//set_signals_interactive();
		(**cmds).data.prompt_input = readline("minishell ðŸš€ ");
		//set_signals_noninteractive();
		if ((**cmds).data.prompt_input && (**cmds).data.prompt_input[0] == '\0')
		{
			free((**cmds).data.prompt_input);
			continue ;
		}
		parsing(&lexer, ft_strdup((**cmds).data.prompt_input));
		built_in(lexer.tokens, envp);
		if (!get_grammar(lexer.tokens->front))
		{
			destroy_tokens(lexer.tokens);
			free((**cmds).data.prompt_input);
			return (0);
		}
		cmds = init_list_commands(lexer.tokens);
		parse_tokens(lexer.tokens, cmds, envp);
		add_history((**cmds).data.prompt_input);
		free_parse(cmds); 
		destroy_tokens(lexer.tokens);
		free((**cmds).data.prompt_input);
		//if (read(0, buffer, sizeof(buffer) - 1) == 0)
		//	exit(0);
	}
	//tcsetattr(0,TCSANOW,&old_termios);
	return (0);
}
